1 1 0 1 0 1 0 0 x y


1 1 1 1 0 0 0 0   1 0
0 0 0 0 1 1 1 1   0 1


1   1 1 1 0    0 1 0 1 0 1   0     1 0 0 0
1   1 1 0 1    0 0 1 0 1 1   0     0 1 0 0
1   1 0 1 1    1 0 1 1 0 0   0     0 0 1 0
1   0 1 1 1    1 1 0 0 1 0   0     0 0 0 1





l - długość słowa = 8
x - liczba bitów parzystości = 4

można zrobić macierz jeżeli 2^x - (x+1) > l
można zrobić macierz ponieważ 2^4 - 5 = 11 > 8


0 1 1 1 1 1 1 0    1 0 0 0 0 0 0 0
0 0 1 1 1 1 1 1    0 1 0 0 0 0 0 0
1 0 0 1 1 1 1 1    0 0 1 0 0 0 0 0
1 1 0 0 1 1 1 1    0 0 0 1 0 0 0 0
1 1 1 0 0 1 1 1    0 0 0 0 1 0 0 0
1 1 1 1 0 0 1 1    0 0 0 0 0 1 0 0
1 1 1 1 1 0 0 1    0 0 0 0 0 0 1 0
1 1 1 1 1 1 0 0    0 0 0 0 0 0 0 1


0 1 1 0 0 0 0 1    1 0 0 1 1 1 1 0 

0*0 + 1*1 +  +  

1 1 1 1 1 1 1 1
 
0 0 0 0 0 0 1 1
 mnożenie to koniunkcja
 dodawanie to alternatywa bitowa (^) = xor




0 1 1 1 1 1 1 0    1 0 0 0 0 0 0 0
0 1 1 0 0 0 0 1    1 0 0 1 1 1 1 0

( ( (0*0 xor 1*1)xor(1*1))xor(1*0) itd itd)











 	1, 1, 1, 1, 0, 0, 0, 0	 	1, 0, 0, 0, 0, 0, 0, 0
        1, 1, 0, 0, 1, 1, 0, 0	 	0, 1, 0, 0, 0, 0, 0, 0
        1, 0, 1, 0, 1, 0, 1, 0	 	0, 0, 1, 0, 0, 0, 0, 0
        0, 1, 0, 1, 0, 1, 1, 0	 	0, 0, 0, 1, 0, 0, 0, 0
        1, 1, 1, 0, 1, 0, 0, 1	 	0, 0, 0, 0, 1, 0, 0, 0
        1, 0, 0, 1, 0, 1, 0, 1	 	0, 0, 0, 0, 0, 1, 0, 0
        0, 1, 1, 1, 1, 0, 1, 1	 	0, 0, 0, 0, 0, 0, 1, 0
        1, 1, 1, 0, 0, 1, 1, 1	 	0, 0, 0, 0, 0, 0, 0, 1

0 0 0 0 1 1 1 0
0 0 0 0 1 1 0 1














